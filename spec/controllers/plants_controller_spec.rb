require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.

describe PlantsController do

  # This should return the minimal set of attributes required to create a valid
  # Plant. As you add validations to Plant, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:name => "name", :seed_from_month => 1, :seed_to_month => 10, :seed_from_day => 12, :seed_to_day => 15
    }
  end

  describe "GET index" do
    it "assigns all plants as @plants" do
      plant = Plant.create! valid_attributes
      get :index
      assigns(:plants).should eq([plant])
    end
  end

  describe "GET show" do
    it "assigns the requested plant as @plant" do
      plant = Plant.create! valid_attributes
      get :show, :id => plant.id.to_s
      assigns(:plant).should eq(plant)
    end
  end

  describe "GET new" do
    it "assigns a new plant as @plant" do
      get :new
      assigns(:plant).should be_a_new(Plant)
    end
  end

  describe "GET edit" do
    it "assigns the requested plant as @plant" do
      plant = Plant.create! valid_attributes
      get :edit, :id => plant.id.to_s
      assigns(:plant).should eq(plant)
    end
  end

  #describe "POST create" do
  #  describe "with valid params" do
  #    it "creates a new Plant" do
  #      expect {
  #        post :create, :plant => valid_attributes
  #      }.to change(Plant, :count).by(0)
  #    end
  #
  #    it "assigns a newly created plant as @plant" do
  #      post :create, :plant => valid_attributes
  #      assigns(:plant).should be_a(Plant)
  #      assigns(:plant).should be_persisted
  #    end
  #
  #    it "redirects to the created plant" do
  #      post :create, :plant => valid_attributes
  #      response.should redirect_to(Plant.last)
  #    end
  #  end

    #describe "with invalid params" do
    #  it "assigns a newly created but unsaved plant as @plant" do
    #    # Trigger the behavior that occurs when invalid params are submitted
    #    Plant.any_instance.stub(:save).and_return(false)
    #    post :create, :plant => {}
    #    assigns(:plant).should be_a_new(Plant)
    #  end
    #
    #  it "re-renders the 'new' template" do
    #    # Trigger the behavior that occurs when invalid params are submitted
    #    Plant.any_instance.stub(:save).and_return(false)
    #    post :create, :plant => {}
    #    response.should render_template("new")
    #  end
    #end
  end

  describe "PUT update" do
    describe "with valid params" do
    #  it "updates the requested plant" do
    #    plant = Plant.create! valid_attributes
    #    # Assuming there are no other plants in the database, this
    #    # specifies that the Plant created on the previous line
    #    # receives the :update_attributes message with whatever params are
    #    # submitted in the request.
    #    Plant.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
    #    put :update, :id => plant.id, :plant => {'these' => 'params'}
    #  end


      #it "redirects to the plant" do
      #  plant = Plant.create! valid_attributes
      #  put :update, :id => plant.id, :plant => valid_attributes
      #  response.should redirect_to(plant)
      #end
    end

    #describe "with invalid params" do
    #  it "assigns the plant as @plant" do
    #    plant = Plant.create! valid_attributes
    #    # Trigger the behavior that occurs when invalid params are submitted
    #    Plant.any_instance.stub(:save).and_return(false)
    #    put :update, :id => plant.id.to_s, :plant => {}
    #    assigns(:plant).should eq(plant)
    #  end
    #
    #  it "re-renders the 'edit' template" do
    #    plant = Plant.create! valid_attributes
    #    # Trigger the behavior that occurs when invalid params are submitted
    #    Plant.any_instance.stub(:save).and_return(false)
    #    put :update, :id => plant.id.to_s, :plant => {}
    #    response.should render_template("edit")
    #  end
    #end
  #end

  #describe "DELETE destroy" do
  #  it "destroys the requested plant" do
  #    plant = Plant.create! valid_attributes
  #    expect {
  #      delete :destroy, :id => plant.id.to_s
  #    }.to change(Plant, :count).by(-1)
  #  end
  #
  #  it "redirects to the plants list" do
  #    plant = Plant.create! valid_attributes
  #    delete :destroy, :id => plant.id.to_s
  #    response.should redirect_to(plants_url)
  #  end
  #end

end
